# ---- Build stage ----
FROM node:22-alpine AS builder

# Ambiente de DEV (instala também devDependencies como o @angular/cli)
ENV NODE_ENV=development
WORKDIR /app

# Copiar package.json antes para aproveitar cache de dependências
COPY package*.json ./

# Instalar dependências incluindo dev
RUN npm ci

# Copiar código-fonte
COPY . .

# Garantir permissões para o usuário node
RUN mkdir -p /app/dist && chown -R node:node /app

USER node

# Usar npm run build em vez de npx
RUN npm run build -- --configuration development --output-path=dist/tech-challenge


# ---- Serve stage ----
FROM nginx:1.29-alpine

WORKDIR /usr/share/nginx/html

# Copiar artefatos do build
COPY --from=builder /app/dist/tech-challenge ./ 

# Substituir config default do nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget --spider -q http://localhost:80 || exit 1

CMD ["nginx", "-g", "daemon off;"]